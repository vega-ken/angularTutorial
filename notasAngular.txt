clase 1 - viendo los archivos de una aplicacion con angular

  approot es un ejemplo de custom directive

  los ts files son transformados a archivos js

  en app.component.ts se incluye el html 

  para los componentes normalmente se crea una carpeta aparte para cada uno

  src/app es lo que al final es la fuente para crear el codigo de distribucion

  la carpeta enviroments te permite setear keys para producion y para desarrollo distintas

clase 2 - instalacion a traves de quickstart ( no con el CLI )

  te lo descargas de aqui https://github.com/angular/quickstart

    descomprimes y pegas y npm install 

  ya que el CLI usa webpack, no tiene que incluir unas cosas que el quickstart incluye en el html

clase 3 - typescript

  typescript es javascript con mas funcinalidades

  puedes poner tipos de variables ahora como strings, numbers ,etc 
    se le puede poner tipos de variables a funciones tambien y parametros
    *notar que no es obligado. pero ayuda a tener menos errores

clase 4 - components 

  aplicaciones en angular : modules + services + components 

  los componenetes hascen el codigo mas facil de mantener, mas organizado y mas facil de trabajra en equipos

    partes el UI en varias partes

  como se un componente en codigo

    @Component({
      selector: 'app-root',
      templateUrl: './app.component.html',
      styleUrls: ['./app.component.css']
    })
    export class AppComponent {
      title = 'app';
    }

clase 5 - ngmodule

  @NgModule({
    declarations: [
      AppComponent --> aqui iran todos los componenetes que se creen en la app 
    ],
    imports: [
      BrowserModule --> http module, etc
    ],
    providers: [], --> services (ajax calls)
    bootstrap: [AppComponent] --> es el primer componente que se va a cargar y los demas estan dentro
  })
  export class AppModule { }

class 6 - creando componentes

  creas la carpeta components dentro de app (esto es de manera manual o lo puede hacer con el CLI)
    ahí viven tus archivos 

      import { Component } from '@angular/core';

      @Component({ // --> cuidado ahí con dejar un espacio entre el decorator y el parentesis
        selector: 'sandbox',
        template: `<h1>Hello World</h1>`
      })

      export class SandboxComponent{ // tu clase debe hacer match con el nombre del archivo

      }

  luego agregas el componente al ngmodule

class 7 - bind data con el componente

  puedes crear propiedaes en tu componente y luego ponerlas en tu propio html de ese componente
    las propiedades las creas en la clase del componente
  
  string interpolation : {{name}}

  se definen las propiedades de un componente sin los keywords let ni const ni var

    puedes definir strings, numeros, objetos, el contructor, otros metodos

  desde el template tambien puedes llamar a las funciones que tenga el componente


