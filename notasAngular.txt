clase 1 - viendo los archivos de una aplicacion con angular

  approot es un ejemplo de custom directive

  los ts files son transformados a archivos js

  en app.component.ts se incluye el html 

  para los componentes normalmente se crea una carpeta aparte para cada uno

  src/app es lo que al final es la fuente para crear el codigo de distribucion

  la carpeta enviroments te permite setear keys para producion y para desarrollo distintas

clase 2 - instalacion a traves de quickstart ( no con el CLI )

  te lo descargas de aqui https://github.com/angular/quickstart

    descomprimes y pegas y npm install 

  ya que el CLI usa webpack, no tiene que incluir unas cosas que el quickstart incluye en el html

clase 3 - typescript

  typescript es javascript con mas funcinalidades

  puedes poner tipos de variables ahora como strings, numbers ,etc 
    se le puede poner tipos de variables a funciones tambien y parametros
    *notar que no es obligado. pero ayuda a tener menos errores

clase 4 - components 

  aplicaciones en angular : modules + services + components 

  los componenetes hascen el codigo mas facil de mantener, mas organizado y mas facil de trabajra en equipos

    partes el UI en varias partes

  como se un componente en codigo

    @Component({
      selector: 'app-root',
      templateUrl: './app.component.html',
      styleUrls: ['./app.component.css']
    })
    export class AppComponent {
      title = 'app';
    }

clase 5 - ngmodule

  @NgModule({
    declarations: [
      AppComponent --> aqui iran todos los componenetes que se creen en la app 
    ],
    imports: [
      BrowserModule --> http module, etc
    ],
    providers: [], --> services (ajax calls)
    bootstrap: [AppComponent] --> es el primer componente que se va a cargar y los demas estan dentro
  })
  export class AppModule { }

class 6 - creando componentes

  creas la carpeta components dentro de app (esto es de manera manual o lo puede hacer con el CLI)
    ahí viven tus archivos 

      import { Component } from '@angular/core';

      @Component({ // --> cuidado ahí con dejar un espacio entre el decorator y el parentesis
        selector: 'sandbox',
        template: `<h1>Hello World</h1>`
      })

      export class SandboxComponent{ // tu clase debe hacer match con el nombre del archivo

      }

  luego agregas el componente al ngmodule

class 7 - bind data con el componente

  puedes crear propiedaes en tu componente y luego ponerlas en tu propio html de ese componente
    las propiedades las creas en la clase del componente
  
  string interpolation : {{name}}

  se definen las propiedades de un componente sin los keywords let ni const ni var

    puedes definir strings, numeros, objetos, el contructor, otros metodos

  desde el template tambien puedes llamar a las funciones que tenga el componente

class 8 - tipos de variables que se pueden definir en los componentes

  en el archivo component.ts se ven ejemplos de diferentes tipos de variables

  se supone que cuando hay un tipo que no concuerda debería no compilar aunque esta version de angular al parecer si renderiza igual la vista.

class 9 - interfaces con objetos

  cuando un objeto tiene muchos campos para rellenar ( ejm un usuario con muchos detalles )

    se crea una interface que puede estar en un archivo externo y luego importarlo

    de la interface puedes crear hasta arreglos.

    se puede usar para modelar la data que tienes

-- section 4 --

class 10 - template files

  puedes poner archivos HTML y CSS linkeados a tu componente de manera externa con las propiedades adecuadas

class 11 - for loops en templates - ngFor directive

  como handlebars. solo tienes que declarar las variables en el componente y luego puedes acceder a ellas casi igual como lo haces con handlebars.

class 12 - ngIf y ngSwitch

  hay nuevas formas en el html del componente para hacer ifs y switchs

class 13 - enlace de propiedades de componentes

  * se renderiza el UI dependiendo de las propiedaes que los componentes llevan

    <!-- 3 maneras de enlazar propiedades -->
      <div><img src="{{imageUrl}}" alt=""></div>
      <div><img [src]="imageUrl" alt=""></div>
      <div><img bind-src="imageUrl" alt=""></div>

class 14 - ngClass

  permite asignar clases dinamicamente

  puedes asignar mas de una clase haciendo que una propiedad sea un objeto y tenga varias propiedades boolean que al final son variables que deciden que clases están activas  y cuales no

    <h4 [class.special2]="isSpecial">This class binding is special</h4>

    <h4 [ngClass]="currentClasses">This heading is initially special and saveable</h4>

  
    