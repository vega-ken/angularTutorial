recuerda que la app la compilas con "ng serve"

clase 1 - viendo los archivos de una aplicacion con angular

  approot es un ejemplo de custom directive

  los ts files son transformados a archivos js

  en app.component.ts se incluye el html 

  para los componentes normalmente se crea una carpeta aparte para cada uno

  src/app es lo que al final es la fuente para crear el codigo de distribucion

  la carpeta enviroments te permite setear keys para producion y para desarrollo distintas

clase 2 - instalacion a traves de quickstart ( no con el CLI )

  te lo descargas de aqui https://github.com/angular/quickstart

    descomprimes y pegas y npm install 

  ya que el CLI usa webpack, no tiene que incluir unas cosas que el quickstart incluye en el html

clase 3 - typescript

  typescript es javascript con mas funcinalidades

  puedes poner tipos de variables ahora como strings, numbers ,etc 
    se le puede poner tipos de variables a funciones tambien y parametros
    *notar que no es obligado. pero ayuda a tener menos errores

clase 4 - components 

  aplicaciones en angular : modules + services + components 

  los componenetes hascen el codigo mas facil de mantener, mas organizado y mas facil de trabajra en equipos

    partes el UI en varias partes

  como se un componente en codigo

    @Component({
      selector: 'app-root',
      templateUrl: './app.component.html',
      styleUrls: ['./app.component.css']
    })
    export class AppComponent {
      title = 'app';
    }

clase 5 - ngmodule

  @NgModule({
    declarations: [
      AppComponent --> aqui iran todos los componenetes que se creen en la app 
    ],
    imports: [
      BrowserModule --> http module, etc
    ],
    providers: [], --> services (ajax calls)
    bootstrap: [AppComponent] --> es el primer componente que se va a cargar y los demas estan dentro
  })
  export class AppModule { }

class 6 - creando componentes

  creas la carpeta components dentro de app (esto es de manera manual o lo puede hacer con el CLI)
    ahí viven tus archivos 

      import { Component } from '@angular/core';

      @Component({ // --> cuidado ahí con dejar un espacio entre el decorator y el parentesis
        selector: 'sandbox',
        template: `<h1>Hello World</h1>`
      })

      export class SandboxComponent{ // tu clase debe hacer match con el nombre del archivo

      }

  luego agregas el componente al ngmodule

class 7 - bind data con el componente

  puedes crear propiedaes en tu componente y luego ponerlas en tu propio html de ese componente
    las propiedades las creas en la clase del componente
  
  string interpolation : {{name}}

  se definen las propiedades de un componente sin los keywords let ni const ni var

    puedes definir strings, numeros, objetos, el contructor, otros metodos

  desde el template tambien puedes llamar a las funciones que tenga el componente

class 8 - tipos de variables que se pueden definir en los componentes

  en el archivo component.ts se ven ejemplos de diferentes tipos de variables

  se supone que cuando hay un tipo que no concuerda debería no compilar aunque esta version de angular al parecer si renderiza igual la vista.

class 9 - interfaces con objetos

  cuando un objeto tiene muchos campos para rellenar ( ejm un usuario con muchos detalles )

    se crea una interface que puede estar en un archivo externo y luego importarlo

    de la interface puedes crear hasta arreglos.

    se puede usar para modelar la data que tienes

-- section 4 --

class 10 - template files

  puedes poner archivos HTML y CSS linkeados a tu componente de manera externa con las propiedades adecuadas

class 11 - for loops en templates - ngFor directive

  como handlebars. solo tienes que declarar las variables en el componente y luego puedes acceder a ellas casi igual como lo haces con handlebars.

  un ejemplo de su uso ( al menos el mas comun visto hasta ahora )
    tienes una variable llamada 'users' en tu componente. entonces en la vista(el UI) haces esto

      <ul class="list-group">
        <li class="list-group-item" *ngFor="let user of users">{{user}}</li>
      </ul>

class 12 - ngIf y ngSwitch

  hay nuevas formas en el html del componente para hacer ifs y switchs

class 13 - enlace de propiedades de componentes

  * se renderiza el UI dependiendo de las propiedaes que los componentes llevan

    <!-- 3 maneras de enlazar propiedades -->
      <div><img src="{{imageUrl}}" alt=""></div>
      <div><img [src]="imageUrl" alt=""></div>
      <div><img bind-src="imageUrl" alt=""></div>

class 14 - ngClass

  permite asignar clases dinamicamente

  puedes asignar mas de una clase haciendo que una propiedad sea un objeto y tenga varias propiedades boolean que al final son variables que deciden que clases están activas  y cuales no

    <h4 [class.special2]="isSpecial">This class binding is special</h4>

    <h4 [ngClass]="currentClasses">This heading is initially special and saveable</h4>

class 15 - enlazando estilos y ngStyle

  puedes tambien en base a las propiedades de un componente decidir qu eestilos aplicar a un elemento en el UI

    <div [style.font-size]="isSpecial ? 'x-large' : 'smaller'">Font size depends on isSpecial</div>

  con ngstyle puedes crear una propiedad en tu componente que sea un objeto que tenga propiedades cambiantes y luego asignarlo a un elemento (de modo que agregas varias clases cambiantes en base a propiedades)

class 16 - pipes

  cuando pasas informacion así como se hacia con handlebars, puedes tambien dar algunos parametros para cambiar esa infomacion. ejemplos en el html del componente.

class 17 - mouse events

  angular tiene su propia manera de enlazar eventos con los elementos del HTML
    ver ejemplos el html del componente. al final se convierten en funciones que programas en el componente en sí

class 18 - cambiando propiedades de componentes a traves de eventos

  se pueden cambiar propiedaes de los componentes al recibir eventos del UI
    en el ejm de esta leccion se saca un elemento si es que un valor del componente es falso

    notar que el elemento desaparece literal (no es que se ponga en visibility: hidden)

class 19 - cambiando propiedades de componentes a través de eventos parte 2 : eventos de teclado

  lo mismo pero con eventos de teclado: 
    ejm en el html
      <div>
        <label for="">Evento keyUp :</label>
        <br>
        <input type="text" (keyup)="fireEvent($event)">
      </div>
    en la clase del componente
      fireEvent(e){
        console.log(e.type)
      }

  tambien se ve como hacer one way data binding pero es mejor usar el ngModule para eso

class 20 - ngModel

  lo usas para hacer two way data binding : que significa que 2 campos están enlazados (si afectas a uno el otro se ve afectado)
    *lo que se hace es enlazar propiedades del componente a campos del UI. cuando se afecta por dentro la propiedad del componente se puede ver que eso cambia el UI. y viceversa

  no olvides que cuando es two way data binding se usa [(ngModel)]

  y tampoco olvides que si estás en un input tienes que darle al atributo name el mismo valor que le das a [(ngModel)]
    ver ejemplo en html del componente para que quede más claro

  *importante. en esta clase se importa el FormsModule al app.module.ts y además se agrega bootstrap 4

class 21 - submission of forms!

  *importante* esta clase es la más útil entre todas

    muestra como puedes usar el two way data binding para poder hacer lo siguiente

      usar la informacion ingresada en un input y agregarla a un arreglo que esta como propiedad de un componente
      ver que cuando usas ngFor de una propiedad de un componente y esta cambia, se actualiza en el UI
      poder actualizar la propiedad de un componente para actualizarla en el form de modo que se tenga mejor UX
        me refiero al borrado de lo que se escribio en el input para poder escribir otra data

      para hacer esto en vanilla JS me hubiese tardado mucho más. aquí es donde veo que se ve la ventaja de usar el framework Angular

class 22 - validacion de forms y submission

 hasta ahora se ve como se validan los forms sin necesidad de la validacion por default que trae HTML5

 ngSubmit evita que se haga el post como normalmente se haria (es como el e.preventDefault creo)

 https://angular.io/guide/form-validation

 https://angular.io/guide/template-syntax#safe-navigation-operator - explica el operador '?'
  
  la idea es que no haya errores en la vista cuando no existe una referencia a lo que se está llamando

--- section 6 ----

class 21 - services y creacion de uno

  la idea del servicio es evitar repetir tu codigo en varios componentes.
    cuando varios componentes necesitan de unas ciertas funcionalidades. es mejor separarlas como un servicio y luego injectarlas como dependencias
      por eso se dice que mantienen tu código de componentes más claro

    notar que se tiene que cambiar el app.module.ts

class 22 - observables

  se crea un observable en el servicio y se envia data al componente que la usa pero la envia en un data stream

  la idea es que desde el observable puedas tener algunas propiedades que cambien y se las puedas enviar a tu componente. luego tu componente se encarga de actualizar esa data en el UI directamente